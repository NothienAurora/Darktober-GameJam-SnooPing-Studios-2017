<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_player</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>self</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Initialize variables

grav = 0.25;
spd = 5;
jspd = 8;
hspd = 0;
vspd = 0;
fric = 1;


</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Player movement
if global.ctrlScheme != "Gamepad" {
    var rkey = (keyboard_check(global.rightCtrl));
    var ralt = (keyboard_check(global.rightAlt));
    var lkey = (keyboard_check(global.leftCtrl));
    var lalt = (keyboard_check(global.leftAlt));
    var jkey = (keyboard_check(global.jumpCtrl));
} else {
    var rkey = ((gamepad_axis_value(0, global.rightCtrl)) &gt; 0);
    var ralt = (gamepad_button_check(0, global.rightAlt));
    var lkey = ((gamepad_axis_value(0, global.leftCtrl)) &lt; 0);
    var lalt = (gamepad_button_check(0, global.leftAlt));
    var jkey = (gamepad_button_check(0, global.jumpCtrl));
}

var frict = fric;

// Check for ground under player
if (place_meeting(x,y+1,obj_solid)) {
    vspd = 0;
    
    // Jumping
    if (jkey) {
        vspd = -jspd;
    }
} else {
    
    // Gravity
    if (vspd &lt; 10){
        vspd += grav;
    }
    if global.ctrlScheme != "Gamepad" {
        if (keyboard_check_released(global.jumpCtrl) &amp;&amp; vspd &lt; -2) {
            vspd = -2;
        }
    } else if (gamepad_button_check_released(0,global.jumpCtrl) &amp;&amp; vspd &lt; -2) {
        vspd = -2;
    }
}

// Make check if the player is moving
if !(((rkey &amp;&amp; lkey) or (ralt &amp;&amp; lalt)) or ((ralt &amp;&amp; lkey) or (rkey &amp;&amp; lalt))) {
    // Moving right
    if (rkey || ralt){
        if (hspd &lt; spd) {
            hspd += frict;
        } else {
            hspd = spd;
        }
    }
    
    // Moving left
    if (lkey || lalt) {
        if (hspd &gt; spd) {
            hspd -= frict;
        } else {
            hspd = -spd;
        }
    }
}

// Check if the player is not moving
if (((rkey &amp;&amp; lkey) or (ralt &amp;&amp; lalt)) or ((ralt &amp;&amp; lkey) or (rkey &amp;&amp; lalt))) {
    if (hspd != 0) {
        if (((hspd &gt; 0 &amp;&amp; (hspd-frict) &lt;= 0) || (hspd &lt; 0 &amp;&amp; (hspd+frict) &gt;= 0 ))) {
            hspd = 0;
        } else {
            if hspd &lt; 0 {
                hspd += frict;
            }
            if hspd &gt; 0{
                hspd -= frict;
            }
        }
    }
}
if ((!rkey &amp;&amp; !lkey &amp;&amp; !ralt &amp;&amp; !lalt)){
    if (hspd != 0) {
        if (hspd &lt; 0) {
            hspd += frict;
        } else if (hspd &gt; 0) {
            hspd -= frict;
        } 
    }
}

// Horizontal collisions
if (place_meeting(x+hspd,y,obj_solid)) {
    while (!place_meeting(x+sign(hspd),y,obj_solid)){
        x += sign(hspd);
    }
    hspd = 0;
}

// Move horizontally
x += hspd;

// Vertical collisions
if (place_meeting(x,y+vspd,obj_solid)) {
    while (!place_meeting(x,y+sign(vspd),obj_solid)){
        y += sign(vspd);
    }
    vspd = 0;
}

// Move vertically
y += vspd;

y = round(y);
x = round(x)
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
